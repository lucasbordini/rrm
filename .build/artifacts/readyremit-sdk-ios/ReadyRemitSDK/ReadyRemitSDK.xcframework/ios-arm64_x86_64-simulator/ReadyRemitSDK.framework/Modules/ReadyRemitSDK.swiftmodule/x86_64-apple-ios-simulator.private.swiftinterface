// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ReadyRemitSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AcuantImagePreparation
import Combine
import Foundation
import Network
@_exported import ReadyRemitSDK
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import VisaSensoryBranding
import WebKit
import _Concurrency
import _StringProcessing
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (ReadyRemitSDK.Reachability) -> ()
  public typealias NetworkUnreachable = (ReadyRemitSDK.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: ReadyRemitSDK.Reachability.NetworkStatus, b: ReadyRemitSDK.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: ReadyRemitSDK.Reachability.Connection
    public static func == (a: ReadyRemitSDK.Reachability.Connection, b: ReadyRemitSDK.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: ReadyRemitSDK.Reachability.NetworkReachable?
  public var whenUnreachable: ReadyRemitSDK.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: ReadyRemitSDK.Reachability.Connection {
    get
  }
  public var connection: ReadyRemitSDK.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension ReadyRemitSDK.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
extension UIKit.UIFont {
  public static func registerSFFont(withFilenameString filenameString: Swift.String)
}
extension Swift.Collection where Self.Element : Swift.StringProtocol {
  public func without(_ index: Swift.Int) -> Swift.String
}
@objc public enum ReadyRemitEnvironment : Swift.Int {
  case production, sandbox
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class ReadyRemit : ObjectiveC.NSObject {
  @objc public static let shared: ReadyRemitSDK.ReadyRemit
  @objc public var appearance: ReadyRemitSDK.ReadyRemitAppearance
  @objc public var environment: ReadyRemitSDK.ReadyRemitEnvironment
  public func launch(inNavigation: UIKit.UINavigationController, delegate: any ReadyRemitSDK.ReadyRemitDelegate, onLaunch: (() -> Swift.Void)?, onDismiss: (() -> Swift.Void)? = nil)
  public func launch(onLoad: @escaping (SwiftUI.AnyView) -> Swift.Void, delegate: any ReadyRemitSDK.ReadyRemitDelegate, onLaunch: (() -> Swift.Void)?, onDismiss: (() -> Swift.Void)? = nil)
  public func launchEntrySwiftUi(authToken: Swift.String, onLaunch: (() -> Swift.Void)?, onDismiss: (() -> Swift.Void)?) -> SwiftUI.AnyView
  @objc public func launchObjc(inNavigation: UIKit.UINavigationController, delegate: any ReadyRemitSDK.ReadyRemitDelegate, onLaunch: (() -> Swift.Void)?, onDismiss: (() -> Swift.Void)? = nil)
  @objc public func languageSelected(_ lang: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.Date {
  public static func getFormattedDate(string: Swift.String, formatter: Swift.String, currentFormat: Swift.String) -> Swift.String
}
extension UIKit.UIColor {
  convenience public init(hex: Swift.String)
  convenience public init(lightHex: Swift.String, darkHex: Swift.String)
}
public typealias Headers = [Swift.String : Swift.String]
@objc public class ReadyRemitObjcOAuthToken : ObjectiveC.NSObject, Swift.Decodable {
  @objc public init(tokenType: Swift.String, accessToken: Swift.String, expiresInSeconds: Swift.Int)
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class ReadyRemitFontScheme : ObjectiveC.NSObject {
  @objc public static var defaultFamily: Swift.String
  @objc public static var dynamicFontsize: Swift.Bool
  public init(family: Swift.String? = nil, size: CoreFoundation.CGFloat? = nil, weight: UIKit.UIFont.Weight? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ReadyRemitColorScheme : ObjectiveC.NSObject {
  @objc public var background: UIKit.UIColor
  @objc public var foreground: UIKit.UIColor
  @objc public var danger: UIKit.UIColor
  @objc public var dangerLight: UIKit.UIColor
  @objc public var success: UIKit.UIColor
  @objc public var divider: UIKit.UIColor
  @objc public var inputLine: UIKit.UIColor
  @objc public var icon: UIKit.UIColor
  @objc public var text: UIKit.UIColor
  @objc public var textSecondary: UIKit.UIColor
  @objc public var buttonText: UIKit.UIColor
  @objc public var primary: UIKit.UIColor
  @objc public var primaryLight: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol ReadyRemitDelegate {
  @objc func onAuthTokenRequest(success: @escaping (Swift.String) -> Swift.Void, failure: @escaping () -> Swift.Void)
  @objc func onSubmitTransfer(transferRequest: ReadyRemitSDK.ReadyRemit.TransferRequest, success: @escaping (Swift.String) -> Swift.Void, failure: @escaping (Swift.String, Swift.String) -> Swift.Void)
  @objc optional func onSDKClose()
}
extension ReadyRemitSDK.ReadyRemit {
  @objc public class TransferRequest : ObjectiveC.NSObject, Swift.Codable {
    @objc final public let dstCountryIso3Code: Swift.String
    @objc final public let dstCurrencyIso3Code: Swift.String
    @objc final public let srcCurrencyIso3Code: Swift.String
    @objc final public let transferMethod: Swift.String
    @objc final public let quoteBy: Swift.String
    @objc final public let amount: Swift.Int
    @objc final public let fee: Swift.Int
    @objc final public let recipientId: Swift.String
    @objc final public let recipientAccountId: Swift.String?
    @objc final public let fields: [ReadyRemitSDK.ReadyRemit.RequestField]?
    @objc final public let quoteHistoryId: Swift.String?
    @objc public init(dstCountryIso3Code: Swift.String, dstCurrencyIso3Code: Swift.String, srcCurrencyIso3Code: Swift.String, transferMethod: Swift.String, quoteBy: Swift.String, amount: Swift.Int, fee: Swift.Int, recipientId: Swift.String, recipientAccountId: Swift.String?, fields: [ReadyRemitSDK.ReadyRemit.RequestField]?, quoteHistoryId: Swift.String)
    @objc public func toJSON() -> Swift.String?
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
  @objc public class RequestField : ObjectiveC.NSObject, Swift.Codable {
    @objc final public let id: Swift.String
    @objc final public let name: Swift.String
    @objc final public let type: Swift.String
    @objc final public let value: Swift.String
    @objc final public let displayText: Swift.String
    @objc public init(id: Swift.String, name: Swift.String, type: Swift.String, value: Swift.String, displayText: Swift.String)
    @objc deinit
    public func encode(to encoder: any Swift.Encoder) throws
    required public init(from decoder: any Swift.Decoder) throws
  }
}
@_inheritsConvenienceInitializers @objc public class ReadyRemitAppearance : ObjectiveC.NSObject {
  @objc public static let shared: ReadyRemitSDK.ReadyRemitAppearance
  @objc public var colors: ReadyRemitSDK.ReadyRemitColorScheme
  @objc public init(colors: ReadyRemitSDK.ReadyRemitColorScheme)
  @objc public init(styles: Foundation.NSDictionary)
  @objc override dynamic public init()
  @objc deinit
}
@available(*, unavailable, renamed: "Connection")
extension ReadyRemitSDK.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension ReadyRemitSDK.Reachability.NetworkStatus : Swift.Hashable {}
extension ReadyRemitSDK.Reachability.Connection : Swift.Equatable {}
extension ReadyRemitSDK.Reachability.Connection : Swift.Hashable {}
extension ReadyRemitSDK.ReadyRemitEnvironment : Swift.Equatable {}
extension ReadyRemitSDK.ReadyRemitEnvironment : Swift.Hashable {}
extension ReadyRemitSDK.ReadyRemitEnvironment : Swift.RawRepresentable {}

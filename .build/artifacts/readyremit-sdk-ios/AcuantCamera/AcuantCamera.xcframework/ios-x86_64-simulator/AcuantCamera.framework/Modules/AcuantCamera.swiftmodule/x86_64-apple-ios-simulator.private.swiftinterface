// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AcuantCamera
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
@_exported import AcuantCamera
import AcuantCommon
import AcuantImagePreparation
import Foundation
import Swift
import TesseractOCR
import UIKit
import _Concurrency
import _StringProcessing
@objc public protocol BarcodeCameraDelegate {
  @objc func captured(barcode: Swift.String?)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CaptureConstants : ObjectiveC.NSObject {
  @objc public static let CAMERA_PREVIEW_LONGER_SIDE_STANDARD: Swift.Int
  @objc public static let CAMERA_PRIVEW_LARGER_DOCUMENT_DPI_RATIO: Swift.Double
  @objc public static let CAMERA_PRIVEW_SMALLER_DOCUMENT_DPI_RATIO: Swift.Double
  @objc public static let ASPECT_RATIO_ID1: Swift.Double
  @objc public static let ASPECT_RATIO_ID3: Swift.Double
  @objc public static let ASPECT_RATIO_THRESHOLD: Swift.Double
  @objc public static let MANDATORY_RESOLUTION_THRESHOLD_DEFAULT: Swift.Int
  @objc public static let MANDATORY_RESOLUTION_THRESHOLD_SMALL: Swift.Int
  @objc public static let MANDATORY_RESOLUTION_THRESHOLD_DEFAULT_OLD_PHONES: Swift.Int
  @objc public static let MANDATORY_RESOLUTION_THRESHOLD_SMALL_OLD_PHONES: Swift.Int
  @objc public static let NO_DOCUMENT_DPI_THRESHOLD: Swift.Int
  @objc public static let SMALL_DOCUMENT_DPI_THRESHOLD: Swift.Int
  @objc public static let SHARPNESS_THRESHOLD: Swift.Int
  @objc public static let GLARE_THRESHOLD: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AcuantMrzResult : ObjectiveC.NSObject {
  @objc public var surName: Swift.String
  @objc public var givenName: Swift.String
  @objc public var country: Swift.String
  @objc public var passportNumber: Swift.String
  @objc public var nationality: Swift.String
  @objc public var dob: Swift.String
  @objc public var gender: Swift.String
  @objc public var passportExpiration: Swift.String
  @objc public var personalDocNumber: Swift.String
  @objc public var optional1: Swift.String
  @objc public var checkSumResult1: Swift.Bool
  @objc public var checkSumResult2: Swift.Bool
  @objc public var checkSumResult3: Swift.Bool
  @objc public var checkSumResult4: Swift.Bool
  @objc public var checkSumResult5: Swift.Bool
  @objc public var threeLineMrz: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public class AcuantMrzParser {
  public init()
  public func parseMrz(mrz: Swift.String) -> AcuantCamera.AcuantMrzResult?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class BarcodeCameraViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public init(options: AcuantCamera.CameraOptions, delegate: any AcuantCamera.BarcodeCameraDelegate)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc deinit
}
extension AcuantCamera.BarcodeCameraViewController : AcuantCamera.BarcodeCaptureDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func captured(barcode: Swift.String?)
}
@objc public protocol DocumentCaptureDelegate {
  @objc func readyToCapture()
  @objc func documentCaptured(image: UIKit.UIImage, barcodeString: Swift.String?)
}
@objc public protocol AutoCaptureDelegate {
  @objc func getAutoCapture() -> Swift.Bool
  @objc func setAutoCapture(autoCapture: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class DocumentCameraController : UIKit.UIViewController {
  @objc public enum CameraState : Swift.Int {
    case Align = 0, MoveCloser = 1, Steady = 2, Hold = 3, Capture = 4
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc @_Concurrency.MainActor(unsafe) public class func getCameraController(delegate: any AcuantCamera.CameraCaptureDelegate, cameraOptions: AcuantCamera.CameraOptions) -> AcuantCamera.DocumentCameraController
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc @_Concurrency.MainActor(unsafe) public func rotateImage(image: UIKit.UIImage) -> UIKit.UIImage
  @objc @_Concurrency.MainActor(unsafe) public func isDocumentMoved(points: [CoreFoundation.CGPoint]) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension AcuantCamera.DocumentCameraController : AcuantCamera.DocumentCaptureDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func readyToCapture()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func documentCaptured(image: UIKit.UIImage, barcodeString: Swift.String?)
}
extension AcuantCamera.DocumentCameraController : AcuantCamera.FrameAnalysisDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func onFrameAvailable(frameResult: AcuantCamera.FrameResult, points: Swift.Array<CoreFoundation.CGPoint>?)
}
extension AcuantCamera.DocumentCameraController : AcuantCamera.AutoCaptureDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func getAutoCapture() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func setAutoCapture(autoCapture: Swift.Bool)
}
@objc @objcMembers public class AcuantMrzCaptureSession : AVFoundation.AVCaptureSession, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @objc public init(captureDevice: AVFoundation.AVCaptureDevice, userCallback: ((AcuantCamera.AcuantMrzCameraController.MrzCameraState, AcuantCamera.AcuantMrzResult?, Swift.Array<CoreFoundation.CGPoint>?) -> Swift.Void)? = nil)
  @objc public func start()
  @objc public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  @objc public func stopCamera()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CameraTextView : QuartzCore.CATextLayer {
  public var textSizeDefault: CoreFoundation.CGFloat
  public var textSizeCapture: CoreFoundation.CGFloat
  public var backgroundColorDefault: CoreGraphics.CGColor?
  public var backgroundColorCapture: CoreGraphics.CGColor?
  public var foregroundColorDefault: CoreGraphics.CGColor?
  public var foregroundColorCapture: CoreGraphics.CGColor?
  @objc override dynamic public var string: Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public func draw(in context: CoreGraphics.CGContext)
  public func setDefaultSettings(frame: CoreFoundation.CGRect)
  public func setCaptureSettings(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CameraDocumentOverlayView : QuartzCore.CAShapeLayer {
  public var alwaysHideBox: Swift.Bool
  public func showBorder(color: CoreGraphics.CGColor?)
  public func hideBorder()
  @objc deinit
}
@objc @objcMembers public class CameraOptions : ObjectiveC.NSObject {
  @objc final public let timeInMsPerDigit: Swift.Int
  @objc final public let digitsToShow: Swift.Int
  @objc final public let allowBox: Swift.Bool
  @objc final public let autoCapture: Swift.Bool
  @objc final public let hideNavigationBar: Swift.Bool
  @objc final public let bracketLengthInHorizontal: Swift.Int
  @objc final public let bracketLengthInVertical: Swift.Int
  @objc final public let defaultBracketMarginWidth: CoreFoundation.CGFloat
  @objc final public let defaultBracketMarginHeight: CoreFoundation.CGFloat
  @objc final public let colorHold: CoreGraphics.CGColor
  @objc final public let colorCapturing: CoreGraphics.CGColor
  @objc final public let colorBracketAlign: CoreGraphics.CGColor
  @objc final public let colorBracketCloser: CoreGraphics.CGColor
  @objc final public let colorBracketHold: CoreGraphics.CGColor
  @objc final public let colorBracketCapture: CoreGraphics.CGColor
  @objc final public let defaultImageUrl: Swift.String
  @objc final public let showBackButton: Swift.Bool
  @objc public init(timeInMsPerDigit: Swift.Int = 900, digitsToShow: Swift.Int = 2, allowBox: Swift.Bool = true, autoCapture: Swift.Bool = true, hideNavigationBar: Swift.Bool = true, bracketLengthInHorizontal: Swift.Int = 80, bracketLengthInVertical: Swift.Int = 50, defaultBracketMarginWidth: CoreFoundation.CGFloat = 0.5, defaultBracketMarginHeight: CoreFoundation.CGFloat = 0.6, colorHold: CoreGraphics.CGColor = UIColor.yellow.cgColor, colorCapturing: CoreGraphics.CGColor = UIColor.green.cgColor, colorBracketAlign: CoreGraphics.CGColor = UIColor.black.cgColor, colorBracketCloser: CoreGraphics.CGColor = UIColor.red.cgColor, colorBracketHold: CoreGraphics.CGColor = UIColor.yellow.cgColor, colorBracketCapture: CoreGraphics.CGColor = UIColor.green.cgColor, defaultImageUrl: Swift.String = "", showBackButton: Swift.Bool = true)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DocumentCaptureSession : AVFoundation.AVCaptureSession {
  @objc override dynamic public init()
  @objc public class func getDocumentCaptureSession(delegate: (any AcuantCamera.DocumentCaptureDelegate)?, frameDelegate: any AcuantCamera.FrameAnalysisDelegate, autoCaptureDelegate: any AcuantCamera.AutoCaptureDelegate, captureDevice: AVFoundation.AVCaptureDevice?) -> AcuantCamera.DocumentCaptureSession
  @objc public func enableCapture()
  @objc public func start()
  @objc public func getFrameMatchThreshold(cropDuration: Swift.Double) -> Swift.Int
  @objc deinit
}
extension AcuantCamera.DocumentCaptureSession : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
extension AcuantCamera.DocumentCaptureSession : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @objc dynamic public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
}
extension AcuantCamera.DocumentCaptureSession : AVFoundation.AVCapturePhotoCaptureDelegate {
  @objc dynamic public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: (any Swift.Error)?)
}
@objc public protocol BarcodeCaptureDelegate {
  @objc func captured(barcode: Swift.String?)
}
public class AcuantOcrDetector {
  public init()
  public func detect(image: UIKit.UIImage) -> Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class AcuantMrzCameraController : UIKit.UIViewController {
  @objc public enum MrzCameraState : Swift.Int {
    case None = 0, Align = 1, MoveCloser = 2, TooClose = 3, Good = 4, Captured = 5
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc @_Concurrency.MainActor(unsafe) public var options: AcuantCamera.CameraOptions!
  @objc @_Concurrency.MainActor(unsafe) public var callback: ((AcuantCamera.AcuantMrzResult?) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) public var customDisplayMessage: (_ state: AcuantCamera.AcuantMrzCameraController.MrzCameraState) -> Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didReceiveMemoryWarning()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc @_Concurrency.MainActor(unsafe) public func exitTimer()
  @objc @_Concurrency.MainActor(unsafe) public func onMrzParsed(result: AcuantCamera.AcuantMrzResult)
  @objc @_Concurrency.MainActor(unsafe) public func isDocumentMoved(newPoints: Swift.Array<CoreFoundation.CGPoint>) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class BarcodeCaptureSession : AVFoundation.AVCaptureSession {
  @objc deinit
}
extension AcuantCamera.BarcodeCaptureSession : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @objc dynamic public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
}
@objc public protocol FrameAnalysisDelegate {
  @objc func onFrameAvailable(frameResult: AcuantCamera.FrameResult, points: Swift.Array<CoreFoundation.CGPoint>?)
}
@objc public enum FrameResult : Swift.Int {
  case NO_DOCUMENT, SMALL_DOCUMENT, BAD_ASPECT_RATIO, GOOD_DOCUMENT, DOCUMENT_NOT_IN_FRAME
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol CameraCaptureDelegate {
  @objc func setCapturedImage(image: AcuantCommon.Image, barcodeString: Swift.String?)
}
@objc @_hasMissingDesignatedInitializers public class CameraCornerOverlayView : QuartzCore.CALayer {
  public var bracketWidth: Swift.Int?
  public var bracketHeight: Swift.Int?
  public var defaultBracketMarginWidth: CoreFoundation.CGFloat?
  public var defaultBracketMarginHeight: CoreFoundation.CGFloat?
  public init(options: AcuantCamera.CameraOptions)
  public func setColor(color: CoreGraphics.CGColor?)
  public func setDefaultCorners(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension AcuantCamera.DocumentCameraController.CameraState : Swift.Equatable {}
extension AcuantCamera.DocumentCameraController.CameraState : Swift.Hashable {}
extension AcuantCamera.DocumentCameraController.CameraState : Swift.RawRepresentable {}
extension AcuantCamera.AcuantMrzCameraController.MrzCameraState : Swift.Equatable {}
extension AcuantCamera.AcuantMrzCameraController.MrzCameraState : Swift.Hashable {}
extension AcuantCamera.AcuantMrzCameraController.MrzCameraState : Swift.RawRepresentable {}
extension AcuantCamera.FrameResult : Swift.Equatable {}
extension AcuantCamera.FrameResult : Swift.Hashable {}
extension AcuantCamera.FrameResult : Swift.RawRepresentable {}

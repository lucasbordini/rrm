// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ScanForensicsPlus
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AcuantCamera
import AcuantCommon
import AcuantFaceCapture
import AcuantImagePreparation
import AcuantPassiveLiveness
import Foundation
import Network
@_exported import ScanForensicsPlus
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public struct IDConstants {
  public enum Status : Swift.String {
    case start
    case confirmFront
    case confirmBack
    case confirmAll
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public static let driverLicense: Swift.String
  public static let trueString: Swift.String
  public static let falseString: Swift.String
  public static let passport: Swift.String
  public static let idNumber: Swift.String
  public static let allowedString: Swift.String
  public struct IDError {
  }
}
extension Swift.String {
  public var localized: Swift.String {
    get
  }
}
public enum IDologyError : Swift.Error {
  case noConnection
  case invalidToken
  case acuantError
  case tokenError(status: ScanForensicsPlus.TokenStatus)
  public var description: Swift.String {
    get
  }
}
public class IDologyRequest {
  public init()
  public func callApi(service: ScanForensicsPlus.IDService, environment: ScanForensicsPlus.IDEnvironment? = .production, parameters: [Swift.String : Swift.String], completion: @escaping (ScanForensicsPlus.XMLResponse?, (any Swift.Error)?) -> Swift.Void)
  public func expectID(environment: ScanForensicsPlus.IDEnvironment? = .production, username: Swift.String, password: Swift.String, address: Swift.String, city: Swift.String, state: Swift.String, countryCode: Swift.String, zipcode: Swift.String, firstName: Swift.String, lastName: Swift.String, completion: @escaping (ScanForensicsPlus.XMLResponse?, (any Swift.Error)?) -> Swift.Void)
  public func expectIDScanOnboard(environment: ScanForensicsPlus.IDEnvironment? = .production, username: Swift.String, password: Swift.String, countryCode: Swift.String, liveness: Swift.String, documentType: Swift.String, frontImage: Swift.String, backImage: Swift.String?, selfieImage: Swift.String?, completion: @escaping (ScanForensicsPlus.XMLResponse?, (any Swift.Error)?) -> Swift.Void)
  public func expectIDScanVerify(environment: ScanForensicsPlus.IDEnvironment? = .production, username: Swift.String, password: Swift.String, queryId: Swift.String, countryCode: Swift.String, liveness: Swift.String, documentType: Swift.String, frontImage: Swift.String, backImage: Swift.String?, selfieImage: Swift.String?, completion: @escaping (ScanForensicsPlus.XMLResponse?, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
public enum IDService : Swift.Int, Swift.CaseIterable {
  public init?(rawValue: Swift.Int)
  public var description: Swift.String {
    get
  }
  case idScan
  case scanOnboard
  case scanVerify
  case expectID
  case token
  case undefined
  public typealias AllCases = [ScanForensicsPlus.IDService]
  public typealias RawValue = Swift.Int
  public static var allCases: [ScanForensicsPlus.IDService] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum IDEnvironment : Swift.Int, Swift.CaseIterable {
  public init?(rawValue: Swift.Int)
  public var description: Swift.String {
    get
  }
  case production
  case staging
  case qe01
  public typealias AllCases = [ScanForensicsPlus.IDEnvironment]
  public typealias RawValue = Swift.Int
  public static var allCases: [ScanForensicsPlus.IDEnvironment] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class XMLResponse : ObjectiveC.NSObject {
  public var data: [Swift.String : Swift.String]
  public var service: ScanForensicsPlus.IDService
  public func parse(xmlString: Swift.String, service: ScanForensicsPlus.IDService)
  @objc override dynamic public init()
  @objc deinit
}
extension ScanForensicsPlus.XMLResponse : Foundation.XMLParserDelegate {
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String] = [:])
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, foundCharacters string: Swift.String)
  @objc dynamic public func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
}
public struct Qualifier {
}
public class ScanForensicsPlusController {
  public var liveness: Swift.Bool
  public var validToken: Swift.Bool
  public var initialized: Swift.Bool
  public init()
  public static func versionNumber() -> Swift.String
  public func initialize(_ token: ScanForensicsPlus.IDologyToken, completion: @escaping (Swift.Bool, ScanForensicsPlus.IDologyError?) -> Swift.Void)
  public static func imageSpecs(acuantImage: AcuantImagePreparation.AcuantImage?) -> [Swift.String : Swift.Int]?
  @objc deinit
}
@objc public protocol ScanForensicsResults {
  @objc func completedScan(frontImage: ScanForensicsPlus.ScannedImage?, backImage: ScanForensicsPlus.ScannedImage?, selfieImage: ScanForensicsPlus.ScannedImage?, barcode: Swift.String?, liveness: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ImageCaptureViewController : UIKit.UIViewController, AcuantCamera.CameraCaptureDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) public func launchSDK(username: Swift.String, password: Swift.String, environment: ScanForensicsPlus.IDEnvironment? = .production, scanDelegate: any ScanForensicsPlus.ScanForensicsResults, showAdvanced: Swift.Bool? = false)
  @_Concurrency.MainActor(unsafe) @objc public func setCapturedImage(image: AcuantCommon.Image, barcodeString: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ScannedImage : ObjectiveC.NSObject {
  public var acuantImage: AcuantImagePreparation.AcuantImage?
  public var image: UIKit.UIImage
  public var isBadImage: Swift.Bool {
    get
  }
  public var base64: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IDologyLog {
  public class func log(message: Swift.String, function: Swift.String = "", line: Swift.Int = 0)
  @objc deinit
}
public class IDologyTokenService {
  public init(environment: ScanForensicsPlus.IDEnvironment?)
  public func getToken(_ username: Swift.String, _ password: Swift.String, completion: @escaping (ScanForensicsPlus.IDologyToken, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
public enum TokenStatus : Swift.Int, Swift.Codable {
  case success
  case badSecret
  case badUsername
  case badPassword
  case invalidLogin
  case warning
  case lockout
  case ipNotOnAllowlist
  case sdkNotEnabled
  case tokenError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class IDologyToken : Swift.Codable {
  public var status: ScanForensicsPlus.TokenStatus
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
extension ScanForensicsPlus.IDConstants.Status : Swift.Equatable {}
extension ScanForensicsPlus.IDConstants.Status : Swift.Hashable {}
extension ScanForensicsPlus.IDConstants.Status : Swift.RawRepresentable {}
extension ScanForensicsPlus.IDService : Swift.Equatable {}
extension ScanForensicsPlus.IDService : Swift.Hashable {}
extension ScanForensicsPlus.IDService : Swift.RawRepresentable {}
extension ScanForensicsPlus.IDEnvironment : Swift.Equatable {}
extension ScanForensicsPlus.IDEnvironment : Swift.Hashable {}
extension ScanForensicsPlus.IDEnvironment : Swift.RawRepresentable {}
extension ScanForensicsPlus.TokenStatus : Swift.Equatable {}
extension ScanForensicsPlus.TokenStatus : Swift.Hashable {}
extension ScanForensicsPlus.TokenStatus : Swift.RawRepresentable {}
